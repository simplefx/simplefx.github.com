<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <title>Simple.Data Help</title>
   <link rel="stylesheet/less" type="text/css" href="../../less/metro.less" />
   <script type="text/javascript" src="../../scripts/less-1.3.0.min.js"></script>
   <script type="text/javascript" src="//ajax.aspnetcdn.com/ajax/jquery/jquery-1.7.2.min.js"></script>
   <script type="text/javascript" src="../../scripts/jquery.metro.js"></script>
</head>
<body>
   <h1>
      <a href="../../index.html" title="Back to index">Simple.Data</a></h1>
   <section>
        Simple.Data is a lightweight framework that uses the dynamic features of .NET 4 to provide an expressive, ORM-ish way of accessing and manipulating data without any of the code pre-generation and boilerplate required by other frameworks.
    </section>
   <div class="items">
      <div style="display: block;" class="pivotItem current">
         <div class="pivot-item">
            <div class="metro-pivot">
               <div class="pivot-item">
                  <article>
                  <h2>Where</h2>
                  </article>
               </div>
               <div class="pivot-item">
                  <article>
                  <h2>Where</h2>
                  </article>
               </div>
               <div class="pivot-item">
                  <article>
                  <h2>Where</h2>
                  </article>
               </div>
            </div>
         </div>
      </div>
   </div>
      <script>
         $(function () {
            $("div.metro-pivot").metroPivot();
         });
   </script>
<script>var _gaq = [['_setAccount', 'UA-35405621-1'], ['_trackPageview']];(function (d, t) {var g = d.createElement(t), s = d.getElementsByTagName(t)[0]; g.src = ('https:' == location.protocol ? '//ssl' : '//www') + '.google-analytics.com/ga.js'; s.parentNode.insertBefore(g, s)}(document, 'script'));</script></body>
</html>

<!--The observant reader will have noticed that there is no GroupBy method in that code. I was trying to work out how to implement it in the simplest way, and I realised that whatever was specified in the GroupBy would have to be all the columns from the Select method which weren’t aggregates. Since that information already exists in the Query object, why make the developer write it out again? I did a little checking, and MySQL is of the same opinion, but most RDBMS systems still seem to require an explicit GROUP BY clause. So that’s another place where Simple.Data makes your life a little bit easier.

“Having” clause support
Queries now support a Having method, which represents the clause of the same name in SQL selects. You can use all the aggregate methods that are supported in column selection lists: Min, Max, Avg, Sum and Count.
// Find all posts without comments
db.Posts.All().Having(db.Posts.Comments.CommentId.Count() == 0);

Table aggregates
At the table level, there is now support for Count and Exists, which is also exposed as Any. These methods can be called with no parameters on a Query, or as methods similar to Find and FindBy on the table object:
int adults = _db.Users.Query().Where(_db.Users.Age &gt;= 18).Count();
// … is the same as …
int adults = _db.Users.Count(_db.Users.Age &gt;= 18);
bool anyBirthdays = _db.Users.FindByDateOfBirth(DateTime.Now.Date).Any();
// … is the same as …
bool anyBirthdays = _db.Users.ExistsByDateOfBirth(DateTime.Now.Date);
// … and also …
bool anyBirthdays = _db.Users.AnyByDateOfBirth(DateTime.Now.Date);
That’s several ways of doing the same thing, but, hey, this is data access, so it’s kind of traditional. If you’re a provider author, don’t worry, it’s all handled. If you’re an adapter author, the SimpleQuery object that you get to play with will look the same regardless which of these methods are used.

Column aggregates
The most common aggregate methods at column level have been implemented: Min, Max, Sum and Average. You can specify these as methods on the column objects in the Select call:
_db.Employees.Query()
    .Select(_db.Employees.Department.Name, _db.Employees.Age.Average().As("AverageAge"));
The observant reader will have noticed that there is no GroupBy method in that code. I was trying to work out how to implement it in the simplest way, and I realised that whatever was specified in the GroupBy would have to be all the columns from the Select method which weren’t aggregates. Since that information already exists in the Query object, why make the developer write it out again? I did a little checking, and MySQL is of the same opinion, but most RDBMS systems still seem to require an explicit GROUP BY clause. So that’s another place where Simple.Data makes your life a little bit easier.

Length
I’ve also added support for the LEN function, which is represented by a Length method on columns:
_db.Users.Query.Select(_db.Users.Name.Length().As("NameLength"));
Length calls will not apply grouping to the query.


Count and CountBy are now GetCount and GetCountBy
In order to support the Count operator within queries, I’ve had to change the name of the Count methods on the table object, so these are now called GetCount and GetCountBy:
db.Posts.GetCount(db.Posts.Rating >= 4);
db.Posts.GetCountByTag("simpledata");


—

See also Magic Counting.-->
