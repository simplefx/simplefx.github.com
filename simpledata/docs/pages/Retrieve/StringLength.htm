<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Simple.Data Help</title>
    <link rel="stylesheet/less" type="text/css" href="../../less/metro.less" />
    <script type="text/javascript" src="../../scripts/less-1.3.0.min.js"></script>
</head>
<body>
    <h1>
        <a href="../../index.html" title="Back to index">Simple.Data</a></h1>
    <section>
        Simple.Data defines a number of commands for retrieving data from a data store. These can then be daisychained in a LINQ-like fashion with further methods to modify the basic query. 
        For example, Simple.Data includes a method to return the length of a field as a string.
    </section>
    <h2>Length</h2>
    <p>Return the number of characters in a text field or in the text representation of a field.</p>
      <h3>
        Syntax</h3>
    <pre class="brush:csharp">public FunctionReference Length( )</pre>
    <h4>
        Parameters</h4>
    <p><code class="method">Length</code> takes no parameters</p>
    <h4>
        Return Value</h4>
    <p>
        Type: <code class="type">FunctionReference</code><br>
        A reference to a column being selected with a string length function applied to it</p>
    <h3>
        Exceptions</h3>
    <table>
        <tr>
            <th>
                Exception
            </th>
            <th>
                Condition
            </th>
        </tr>
        <tr>
            <td>
                <code class="type">InvalidOperationException</code>
            </td>
            <td>
                <code class="method">Length</code> has been used or daisychained to a base function (All, FindAllBy, &#8230;) rather than to a column in a <code class="method">Select</code> clause. 
            </td>
            </tr>
        <tr>
            <td>
                <code class="type">NullReferenceException</code>
            </td>
            <td>
                <code class="method">Length</code> has been daisychained to a table reference rather than a column reference within a <code class="method">Select</code> clause. 
            </td>
            </tr>
        <tr>
            <td><code class="type">ArgumentException</code></td>
            <td>You have passed one or more arguments to <code class="method">Length</code></td>
        </tr>
    </table>
    <p>Note that <a href="https://github.com/markrendle/Simple.Data/issues?state=open">issues #289 - #290</a> are still open with regards to exceptions thrown by Length.</p>
    <h3>Remarks</h3>
    <p><code class="method">Length</code> must be called only within a <code class="method">Select</code> clause, appended to one of the fields being selected.</p>
    <ul>
        <li>Unless otherwise aliased, or <a href="ScalarValues.htm">cast to a scalar value</a>, you can access the length value in the returned SimpleRecord object using the empty string as a key</li>
        <li>If calling <code class="method">Length</code> on a non-string field, the value returned is that of the string representation of that field</li>
        <li>Calls to <code class="method">Length</code> will not apply grouping to the query.</li>
    </ul>
    <h3>Examples</h3>
    <h4>1</h4>
    <p>To return the length of each title of the Albums in the Albums table, and reference it as TitleLength, use the following code:</p>
    <pre class="brush:csharp">var details = db.Albums.Select(db.Albums.Title.Length().As("TitleLength"));</pre>
    <p>Simple.Data sends the following SQL to the database when details is evaluated</p>
    <pre class="brush:sql">select 
   len([dbo].[Albums].[Title]) AS [NameLength]
from [dbo].[Albums]</pre>
    <script>var _gaq = [['_setAccount', 'UA-35405621-1'], ['_trackPageview']]; (function (d, t) { var g = d.createElement(t), s = d.getElementsByTagName(t)[0]; g.src = ('https:' == location.protocol ? '//ssl' : '//www') + '.google-analytics.com/ga.js'; s.parentNode.insertBefore(g, s) }(document, 'script'));</script>
</body>
</html>


