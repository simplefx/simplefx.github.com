<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Simple.Data Help</title>
    <link rel="stylesheet/less" type="text/css" href="../../less/metro.less" />
    <script type="text/javascript" src="../../scripts/less-1.3.0.min.js"></script>
    <script type="text/javascript" src="//ajax.aspnetcdn.com/ajax/jquery/jquery-1.7.2.min.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.metro.js"></script>
</head>
<body>
    <h1>
        <a href="../../index.html" title="Back to index">Simple.Data</a></h1>
    <section>
        Simple.Data defines a number of commands for retrieving data from a data store. These can then be daisy-chained in a LINQ-like fashion with further methods to modify the basic query. For example, the With, WithOne, and WithMany commands allow you to join two or more tables together in a query and access the contents of both using an eager-loading strategy. This means that if you cast the results of an eager-loaded query into a POCO, Simple.Data will gather any data from child tables into properties or collections for you to query without any subsequent queries to the database. See <a href="http://blog.hmobius.com/post/2012/10/14/Inferred-Hierarchies-and-Evaluation-Strategies-in-SimpleData.aspx">here</a> for more information.
    </section>
    <div class="items">
        <div style="display: block;" class="pivotItem current">
            <div class="pivot-item">
                <div class="metro-pivot">
                    <div class="pivot-item">
                        <article>
                            <h2>With</h2>
                            <p>Use <code class="method">With</code> to create an eager-loaded join query between two tables <em>which have a foreign key relationship (or equivalent) between each other</em>. When cast to the corresponding POCOs, enumerable properties representing the child tables will be hydrated correctly.</p>
                            <p>There are two ways to form an <code class="method">With</code> method.</p>
                            <ul>
                                <li>You can specify the child table name as a named parameter.</li>
                                <li>You can specify the child table name as part of the method</li>
                            </ul>
                            <h3>Syntax</h3>
                            <pre class="brush:csharp">public SimpleQuery WithtargetTableName(
)

public SimpleQuery With(
	ObjectReference targetTableReference
	[, out dynamic aliasedTargetTable]
)</pre>
                            <h4>Parameters</h4>
                            <dl>
                                <dt><code class="parameter">targetTableName</code></dt>
                                <dd>Type: <code class="type">string</code>
                                    The name or alias of the child table in the join</dd>
                                <dt><code class="parameter">targetTableReference</code></dt>
                                <dd>Type: <code class="type">ObjectReference</code><br>
                                    A reference to the child table in the join written using either dot notation (db.PrimaryTable.ChildTable) or index notation (db["PrimaryTable"]["SecondaryTable"]). <em>Note the chained style of identifying the child table</em>.<br />
                                    <br />
                                    Alternately, the results of a call to <code class="method">As</code>
                                </dd>
                                <dt><code class="parameter">aliasedTargetTable</code></dt>
                                <dd>Type: <code class="type">dynamic</code><br />
                                    An out parameter which allows you to alias tables in the join and reuse them in later joins.
                                </dd>
                            </dl>
                            <h4>Return Value</h4>
                            <p>
                                Type: <code class="type">SimpleQuery</code><br />
                                A <code class="type">SimpleQuery</code> object containing a With clause.  
                            </p>
                            <h3>Exceptions</h3>
                            <table>
                                <tr>
                                    <th>Exception</th>
                                    <th>Condition</th>
                                </tr>
                                <tr>
                                    <td><code class="type">NullReferenceException</code></td>
                                    <td>With has been called directly on a table reference without a base command (All, FindAllBy etc)</td>
                                </tr>
                                <tr>
                                    <td><code class="type">ArgumentException</code></td>
                                    <td><code class="parameter">tableReference</code> is not a valid, single column reference<br />
                                        <em>- or -</em><br />
                                        Both <code class="parameter">targetTableReference</code> and <code class="parameter">targetTableName</code> are used in the same call.                      </td>
                                </tr>
                                <tr>
                                    <td><code class="type">InvalidOperationException</code></td>
                                    <td>There is no foreign key relationship between the primary table and the target table.</td>
                                </tr>
                            </table>
                            <p>Note that <a href="https://github.com/markrendle/Simple.Data/issues?state=open">issues #282 - #284</a> are still open with regards to exceptions thrown by With.</p>
                            <h3>Remarks</h3>
                            <p>Note that you cannot currently use With to eager-load grandchild tables or deeper.</p>
                            <h3>Examples</h3>
                            <h4>With Queries Returning A SimpleRecord</h4>
                            <p>If you are using a base command that returns a SimpleRecord (<code class="method">Find</code>, <code class="method">Get</code>, <code class="method">FindBy</code>), you&#8217;ll need to write the <code class="method">With</code> command before the base command. For example:</p>
                            <pre class="brush:csharp">db.Albums.WithArtists().Get(1);   // fluid style
db.Albums.With(db.Albums.Artists).Get(1);    // named parameter style</pre>
                            <h4>With Queries Returning A SimpleQuery</h4>
                            <p>If you are using a base command that returns a SimpleQuery (<code class="method">All</code>, <code class="method">FindAll</code>, <code class="method">FindAllBy</code>), you can write the <code class="method">With</code> command before or (more readably) after the base command. For example:</p>
                            <pre class="brush:csharp">db.Albums.All().WithArtists();   // fluid style
db.Albums.All().With(db.Albums.Artists);    // named parameter style</pre>
                            <h4>Using With and As to Give Collection The Correct Name</h4>
                            <p>If the POCO to which you are casting the results of a query uses a different property name for a table which you are eager-loading, use the <code class="method">As</code> function to change its name.</p>
                            <pre class="brush:csharp">db.Albums.All().With(db.Albums.Artists.As("BandInfo"));</pre>
                            <p>You can also use the optional out variable here to keep your Select statements compact.</p>
                            <pre class="brush:csharp">dynamic BandAlias;
var albumDetails = db.Albums.All()
    .With(db.Albums.Artists.As("BandInfo"), out BandAlias)
    .Select(
       db.Albums.Title,
       BandAlias.Name);</pre>
                            <h4>Using With and Join.On To Specify Explicit Joins</h4>
                            <p>In cases where you want to eager load some data but need to specify a Join relationship explicitly, you can use <code class="method">Join().On()</code> in conjunction with <code class="method">With</code>.</p>
                            <pre class="brush:csharp">dynamic homeTeam;
dynamic awayTeam;
db.Fixtures.FindAllByDate(date)
    .Join(db.Team.As("HomeTeam"), out homeTeam)
    .On(db.Fixtures.HomeTeamId == homeTeam.Id)
    .Join(db.Team.As("AwayTeam"), out awayTeam)
    .On(db.Fixtures.AwayTeamId == awayTeam.Id)
    .With(homeTeam)
    .With(awayTeam);</pre>
                        </article>
                    </div>
                    <div class="pivot-item">
                        <article>
                            <h2>WithOne &amp; WithMany</h2>
                            <p>Use <code class="method">WithOne</code> or <code class="method">WithMany</code> to create an eager-loaded join query between two tables <em>which do NOT have a foreign key relationship (or equivalent) between each other.</em> When cast to the corresponding POCOs, data from the child table will be hydrated into a single, complex object or an IEnumerable collection respectively.</p>
                            <h3>Syntax</h3>
                            <pre class="brush:csharp">public SimpleQuery WithOne(
	ObjectReference targetTableReference
	[, out dynamic aliasedTargetTable]
)

public SimpleQuery WithMany(
	ObjectReference targetTableReference
	[, out dynamic aliasedTargetTable]
)</pre>
                            <h4>Parameters</h4>
                            <dl>
                                <dt><code class="parameter">targetTableReference</code></dt>
                                <dd>Type: <code class="type">ObjectReference</code><br>
                                    A reference to the child table in the join written using either dot notation (db.PrimaryTable.ChildTable) or index notation (db["PrimaryTable"]["SecondaryTable"]). <em>Note the chained style of identifying the child table</em>.<br />
                                    <br />
                                    Alternately, the results of a call to <code class="method">As</code>
                                </dd>
                                <dt><code class="parameter">aliasedTargetTable</code></dt>
                                <dd>Type: <code class="type">dynamic</code><br />
                                    An out parameter which allows you to alias tables in the join and reuse them in later joins.
                                </dd>
                            </dl>
                            <h4>Return Value</h4>
                            <p>
                                Type: <code class="type">SimpleQuery</code><br />
                                A <code class="type">SimpleQuery</code> object containing a With clause.  
                            </p>
                            <h3>Exceptions</h3>
                            <table>
                                <tr>
                                    <th>Exception</th>
                                    <th>Condition</th>
                                </tr>
                                <tr>
                                    <td><code class="type">NullReferenceException</code></td>
                                    <td>WithOne or WithMany has been called directly on a table reference without a base command (All, FindAllBy etc)</td>
                                </tr>
                                <tr>
                                    <td><code class="type">ArgumentException</code></td>
                                    <td><code class="parameter">tableReference</code> is not a valid, single column reference</td>
                                </tr>
                            </table>
                            <h3>Remarks</h3>
                            <p><code class="method">WithOne</code> and <code class="method">WithMany</code> can also be used to create joins between tables that do have foreign key relationships between them, as well as With.</p>
                            <p>
                                You cannot currently use <code class="method">WithOne</code> or <code class="method">WithMany</code> to eager-load grandchild tables or deeper.
                            </p>
                            <h3>Examples</h3>
                            <h4>Queries Returning A SimpleRecord</h4>
                            <p>If you are using a base command that returns a SimpleRecord (<code class="method">Find</code>, <code class="method">Get</code>, <code class="method">FindBy</code>), you&#8217;ll need to write the commands before the base command. For example:</p>
                            <pre class="brush:csharp">db.Albums.WithOne(db.Albums.Genre).Get(1);
db.Artists.WithMany(db.Artists.Albums).Get(1);</pre>
                            <h4>Queries Returning A SimpleQuery</h4>
                            <p>If you are using a base command that returns a SimpleQuery (<code class="method">All</code>, <code class="method">FindAll</code>, <code class="method">FindAllBy</code>), you can write the command before or (more readably) after the base command. For example:</p>
                            <pre class="brush:csharp">db.Albums.All().WithOne(db.Albums.Genre);
db.Artists.All().WithMany(db.Artists.Albums);</pre>
                            <h4>Using As to Give Collection The Correct Name</h4>
                            <p>If the POCO to which you are casting the results of a query uses a different property name for a table which you are eager-loading, use the <code class="method">As</code> function to change its name.</p>
                            <pre class="brush:csharp">db.Albums.All().WithOne(db.Albums.Artists.As("BandInfo"));</pre>
                            <p>You can also use the optional out variable here to keep your Select statements compact.</p>
                            <pre class="brush:csharp">dynamic BandAlias;
var albumDetails = db.Albums.All()
    .WithOne(db.Albums.Artists.As("BandInfo"), out BandAlias)
    .Select(
       db.Albums.Title,
       BandAlias.Name);</pre>
                            <h4>Using Join.On To Specify Explicit Joins</h4>
                            <p>In cases where you want to eager load some data but need to specify a Join relationship explicitly, you can use <code class="method">Join().On()</code> in conjunction with <code class="method">With</code>.</p>
                            <pre class="brush:csharp">dynamic homeTeam;
dynamic awayTeam;
db.Fixtures.FindAllByDate(date)
    .Join(db.Team.As("HomeTeam"), out homeTeam)
    .On(db.Fixtures.HomeTeamId == homeTeam.Id)
    .Join(db.Team.As("AwayTeam"), out awayTeam)
    .On(db.Fixtures.AwayTeamId == awayTeam.Id)
    .WithOne(homeTeam)
    .WithOne(awayTeam);</pre>
                        </article>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        $(function () {
            $("div.metro-pivot").metroPivot();
        });
    </script>
    <script>var _gaq = [['_setAccount', 'UA-35405621-1'], ['_trackPageview']]; (function (d, t) { var g = d.createElement(t), s = d.getElementsByTagName(t)[0]; g.src = ('https:' == location.protocol ? '//ssl' : '//www') + '.google-analytics.com/ga.js'; s.parentNode.insertBefore(g, s) }(document, 'script'));</script>
</body>
</html>
