<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Simple.Data Help</title>
    <link rel="stylesheet/less" type="text/css" href="../../less/metro.less" />
    <script type="text/javascript" src="../../scripts/less-1.3.0.min.js"></script>
</head>
<body>
    <h1><a href="../../index.html" title="Back to index">Simple.Data</a></h1>
    <section>
        Simple.Data uses a lazy-loading strategy by default to hydrate .NET objects (POCOs) but also has an option to use an eager-loading strategy as well. Here is how they differ and how to use them.
    </section>
    <h2>Lazy vs. Eager Loading</h2>
    <p>Suppose we have two tables in our database, Artists and Albums.</p>
    <p><img src="../../images/lazyvseager1.png" /></p>
    <p>The simplest way to display an artist&rsquo;s details and album titles would be this.</p>
    <pre class="brush:csharp">// Retrieve artist with PK value of 22<br />var lazyDynamicArtist = db.Artists.Get(22);<br />Console.WriteLine("Artist {0} ({1})", lazyDynamicArtist.ArtistId, lazyDynamicArtist.Name);<br /><br />foreach (var album in lazyDynamicArtist.Albums)<br />{&nbsp;<br />  Console.WriteLine("\t{0}", album.Title);&nbsp;<br />}</pre>
    <p>Simple.Data adopts a lazy evaluation strategy so <code class="variable">lazyDynamicArtist</code> is not evaluated until accessed for the first time in the first call to <code class="method">Console.WriteLine</code>. Then it sends the following SQL to the database.</p>
    <pre class="brush:sql">SELECT TOP 1 <br />  [dbo].[Artists].[ArtistId], <br />  [dbo].[Artists].[Name] <br />from <br />  [dbo].[Artists] <br />where <br />  [ArtistId] = @p1<br />@p1 (Int32) = 22</pre>
    <p>This explains the existence of the <code class="property">ArtistId</code> and <code class="property">Name</code> properties for <code class="variable">lazyDynamicArtist</code>, but <em>where has the <code class="property">Albums</code> property come from</em>? Answer: Simple.Data has inferred the hierarchy of tables / existence of the <code class="property">Albums</code> property from the foreign key relationship between Artists and Albums table. Once again, the <code class="property">Albums</code> collection is evaluated <em>only when accessed for the first time</em> (here, as part of the foreach loop). When that occurs, another query is sent to the database and silently returns another dynamic object to iterate through.</p>
    <pre class="brush:sql">select<br />  [dbo].[Albums].[AlbumId],<br />  [dbo].[Albums].[GenreId],<br />  [dbo].[Albums].[ArtistId],<br />  [dbo].[Albums].[Title],<br />  [dbo].[Albums].[Price],<br />  [dbo].[Albums].[AlbumArtUrl] <br />from <br />  [dbo].[Albums] <br />WHERE <br />  [dbo].[Albums].[ArtistId] = @p1<br />@p1 (Int32) = 22</pre>
    <p>Note that despite <a href="http://blog.hmobius.com/post/2012/06/23/Name-Resolution-in-SimpleData.aspx">Simple.Data&rsquo;s name resolution tricks when parsing table and column names in query functions</a>, accessing artist.Album will throw an exception. Simple.Data does not use any pluralisation rules at this point. You must use <em>the exact table name</em> as a property to access to the inferred hierarchy.</p>
    <p>This lazy evaluation strategy does have its drawbacks however. The most obvious is the number of SQL commands you can end up sending to the database. In this example, with only two tables needing to be accessed for a single artist, only two statements are sent. In general, n+1 statements will be sent: one for the list of artists and one per artist (n) for each list of albums to retrieve. Add in more tables, and the number of SQL commands sent to the database is quickly far more than your DBA would prefer you make</p>
    <p>Another less immediately obvious down side to this strategy comes via Simple.Data&rsquo;s ability to cast the results of a query into a statically typed object (POCO) on the fly. Let&rsquo;s say we have an Artist class defined like this:</p>
    <pre class="brush:csharp">public class Artist<br />{<br />  public int ArtistId { get; set; }<br />  public string Name { get; set; }<br />  public IEnumerable&lt;Album&gt; Albums { get; set; }<br />}</pre>
    <p>If we try the following code, we hit a snag:</p>
    <pre class="brush:csharp">// Cast result of query to Artist type<br />Artist lazyPocoArtist = db.Artists.Get(22);<br /><br />Console.WriteLine("Artist {0} {1}", lazyPocoArtist.ArtistId, lazyPocoArtist.Name);<br /><br />foreach (var album in lazyPocoArtist.Albums)<br />{<br />  Console.WriteLine("\t{0}", album.Title);<br />}</pre>
    <p>The first two lines of code work fine, but <code class="property">lazyPocoArtist.Albums</code> now returns null. The inferred hierarchy is lost as a result of casting the dynamic (SimpleRecord) object to the static Artist type, no evaluation of Albums occurs and a <code class="type">System.NullReferenceException</code> is thrown.</p>
    <h3>Recap</h3>
    <p>In brief then,</p>
    <ul>
        <li>Access the artist information as a dynamic (SimpleRecord or item in a SimpleQuery) object and the Albums property will be evaluated when it is accessed for the first time. It will become available as another dynamic (SimpleQuery) object to iterate through. Note that even if the artist in question has no albums attached to it in the database, a SimpleQuery object is still created but with nothing in it to enumerate.</li>
        <li>Access the artist information as a POCO and the Albums property will return null.</li>
    </ul>
    <h2>Eager Evaluation</h2>
    <p>It&rsquo;s fairly obvious that the lazyPocoArtist variable returns null for its Albums property because Simple.Data didn&rsquo;t actually retrieve any Album information for the artist before it was cast into the Artist type. It was lazy. Fortunately, we can change the initial query command and turn Simple.Data into a pre-emptive, eager data retrieval machine. All we need to do is add a <code class="method">With</code> statement like so.</p>
    <pre class="brush:csharp">var eagerDynamicArtist = db.Artists.FindAllByArtistId(22).WithAlbums().FirstOrDefault();<br /><br />Console.WriteLine("Artist {0} {1}", eagerDynamicArtist.ArtistId, eagerDynamicArtist.Name);<br /><br />foreach (var album in eagerDynamicArtist.Albums)<br />{<br />  Console.WriteLine("\t{0}", album.Title);<br />}</pre>
    <p>Note that I&rsquo;ve switched from using <code class="method">Get</code> to <code class="method">FindAllBy.FirstOrDefault</code> to return a SimpleRecord object.</p>
    <ul>
        <li>There&rsquo;s currently <a href="https://github.com/markrendle/Simple.Data/issues/235">a bug using Get with a With statement</a> in that it only returns the first row in the JOINed table rather than them all.</li>
        <li>Once the bug is fixed, the equivalent statement would be <code>var eagerDynamicArtist = db.Artists.WithAlbums().Get(22);</code> which looks odd, but needs to be this way around or Simple.Data will throw an exception.</li>
    </ul>
    <p>As with the lazy loaded sample earlier, <code class="variable">eagerDynamicArtist</code> is not evaluated until accessed for the first time in the first call to <code class="method">Console.WriteLine</code> at which point it sends the following SQL to the database.</p>
    <pre class="brush:sql">select <br />  [dbo].[Artists].[ArtistId],<br />  [dbo].[Artists].[Name],<br />  [dbo].[Albums].[AlbumId] AS [__withn__Albums__AlbumId],<br />  [dbo].[Albums].[GenreId] AS [__withn__Albums__GenreId],<br />  [dbo].[Albums].[ArtistId] AS [__withn__Albums__ArtistId],<br />  [dbo].[Albums].[Title] AS [__withn__Albums__Title],<br />  [dbo].[Albums].[Price] AS [__withn__Albums__Price],<br />  [dbo].[Albums].[AlbumArtUrl] AS [__withn__Albums__AlbumArtUrl] <br />from [dbo].[Artists] <br />  LEFT JOIN [dbo].[Albums] ON ([dbo].[Artists].[ArtistId] = [dbo].[Albums].[ArtistId]) <br />WHERE <br />  [dbo].[Artists].[ArtistId] = @p1<br />@p1 (Int32) = 22</pre>
    <p>The With statement is <a href="http://simplefx.org/simpledata/docs/pages/Start/NamingConventions.html">fluid</a> like <code class="method">FindAllBy</code>, so by adding <code class="method">WithAlbums</code> into the command chain, it knows to include the contents of the Albums table in its query to the database and that it must then collate the results into one row of information about an artist. It does this with a LEFT JOIN statement. The net result is that <code class="variable">eagerDynamicArtist</code> is created with an <code class="property">Albums</code> property already populated with all the albums in a <code class="type">SimpleList</code> object - another <code class="type">IEnumerable&lt;dynamic&gt;</code>.</p>
    <p>
        <img style="border: 0px currentcolor; display: inline; background-image: none;" title="Screenshot of the Locals window as eagerDynamicArtist is being accessed. Shows Albums property to have type SimpleList" src="http://blog.hmobius.com/image.axd?picture=simplelist.png" alt="Screenshot of the Locals window as eagerDynamicArtist is being accessed. Shows Albums property to have type SimpleList" width="552" height="238" border="0" /></p>
    <p>As with <code class="variable">lazyDynamicArtist</code>, you can just iterate over a SimpleList to access each item it contains so the rest of the example code here remains the same. The main difference is that there are no additional SQL statements sent to the database on the fly, so your DBAs will like you a lot more, <em>except if there are no items in the Albums table matching the artistId</em>. More on that in a minute.</p>
    <p>So how does this look when casting <code class="variable">eagerDynamicArtist</code> to a POCO? It works very well.</p>
    <pre class="brush:csharp">Artist eagerPocoArtist = db.Artists.FindAllByArtistId(22).WithAlbums().FirstOrDefault();<br /><br />Console.WriteLine("Artist {0} {1}", eagerPocoArtist.ArtistId, eagerPocoArtist.Name);<br /><br />foreach (var album in eagerPocoArtist.Albums)<br />{<br />  Console.WriteLine("\t{0}", album.Title);<br />}</pre>
    <p><code class="property">eagerPocoArtist.Albums</code> is populated and cast correctly from a <code class="type">SimpleList</code> into an <code class="type">IEnumerable&lt;Album&gt;</code> (or whatever subtype you prefer) for your code to iterate through. Hurrah! But with a proviso....</p>
    <h3>When there are no matching items in the JOINed table</h3>
    <p>What happens in an eager-loading scenario if the Artists table contains a row with no matching rows in the Albums table? Answer: the LEFT JOIN generated by WithAlbums returns null for all the Albums table fields.</p>
    <ul>
        <li>If the result is accessed as a dynamic object, <code class="variable">eagerDynamicArtist</code> will not have an Albums property pre-generated at all. However, because Simple.Data still infers a hierarchy via foreign keys, it evaluates the <code class="property">Albums</code> collection <em>again</em> when accessed for the first time (here, as part of the foreach loop), sending <em>another</em> query to the database which <em>again</em> returns no results as a dynamic (SimpleQuery) object. (But not a null one)</li>
        <li>If the result is cast first to a POCO, <code class="property">eagerPocoArtist.Albums</code> will be set to null, so it will have to be tested for null before being iterated over.</li>
    </ul>
    <p>In a nutshell then, if the JOINed table has no associated rows, Simple.Data drops back to behaving as if it were lazy-loading data rather than eager-loading it. Coder beware.</p>
    <h2>Wrapping Up</h2>
    <p>The examples above are all predicated on the following assumptions:</p>
    <ul>
        <li>The code is using the Simple.Data.SqlServer provider to access the database. YMMV if you are using a different Simple.Data.ADO-based provider</li>
        <li>The two tables have a foreign key relationship between them and referential integrity is being maintained. Without it, the inferred hierarchy does not exist and the Albums property only exists if you eager-load it using the WithMany method rather than With. The former (and its corresponding WithOne method) allows you to specify the relationship between two tables while the former bases it on existing FK relationships.</li>
    </ul>


    <script>var _gaq = [['_setAccount', 'UA-35405621-1'], ['_trackPageview']]; (function (d, t) { var g = d.createElement(t), s = d.getElementsByTagName(t)[0]; g.src = ('https:' == location.protocol ? '//ssl' : '//www') + '.google-analytics.com/ga.js'; s.parentNode.insertBefore(g, s) }(document, 'script'));</script>
</body>
</html>
